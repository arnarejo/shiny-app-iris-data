ggplot(train, aes(x = Utilities, y = SalePrice)) + geom_point()
ggplot(train, aes(x = LotConfig, y = SalePrice)) + geom_point()
class(train$LandSlope)
ggplot(train, aes(x = LandSlope, y = SalePrice)) + geom_point()
class(train$Neighborhood)
cor_sorted <- as.matrix(sort(train[,'SalePrice'], decreasing = TRUE))
length(cor_sorted)
#select only high corelations
CorHigh <- names(which(apply(cor_sorted, 1, function(x) abs(x) > 0.35)))
cor_numVar <- cor_numVar[CorHigh, CorHigh]
dim(cor_numVar)
corrplot.mixed(cor_numVar, tl.col="black", tl.pos = "lt")
cor_sorted <- as.matrix(sort(train[,'SalePrice'], decreasing = TRUE))
length(cor_sorted)
#select only high corelations
CorHigh <- names(which(apply(cor_sorted, 1, function(x) abs(x) > 0.5)))
cor_numVar <- cor_numVar[CorHigh, CorHigh]
dim(cor_numVar)
corrplot.mixed(cor_numVar, tl.col="black", tl.pos = "lt")
cor_sorted <- as.matrix(sort(train[,'SalePrice'], decreasing = TRUE))
length(cor_sorted)
#select only high corelations
CorHigh <- names(which(apply(cor_sorted, 1, function(x) abs(x) > 0.7)))
cor_numVar <- cor_numVar[CorHigh, CorHigh]
dim(cor_numVar)
corrplot.mixed(cor_numVar, tl.col="black", tl.pos = "lt")
cor_numVar <- cor(train, use="pairwise.complete.obs") #correlations of all numeric variables
cor_numVar <- cor(train, use="pairwise.complete.obs")
sapply(train, class)
x<-data.frame(Factor=sapply(train,is.factor), Missing_Values=colSums(is.na(train)))
fac_names=rownames(x[which(x$Factor==TRUE),])
num_names=rownames(x[which(x$Factor==FALSE),])
fac_var<-data.frame(train[fac_names])
num_var<-data.frame(train[num_names])
x<-data.frame(Factor=sapply(train,is.factor), Missing_Values=colSums(is.na(train)))
fac_names=rownames(x[which(x$Factor==TRUE),])
num_names=rownames(x[which(x$Factor==FALSE),])
fac_var<-data.frame(train[fac_names])
num_var<-data.frame(train[num_names])
cor_numVar <- cor(num_var, use="pairwise.complete.obs")
cor_numVar <- cor(num_var, use="pairwise.complete.obs")
cor_sorted <- as.matrix(sort(cor_numVar[,'SalePrice'], decreasing = TRUE))
length(cor_sorted)
#select only high corelations
CorHigh <- names(which(apply(cor_sorted, 1, function(x) abs(x) > 0.35)))
cor_numVar <- cor_numVar[CorHigh, CorHigh]
dim(cor_numVar)
corrplot.mixed(cor_numVar, tl.col="black", tl.pos = "lt")
x<-data.frame(Factor=sapply(train,is.factor), Missing_Values=colSums(is.na(train)))
fac_names=rownames(x[which(x$Factor==TRUE),])
num_names=rownames(x[which(x$Factor==FALSE),])
fac_var<-data.frame(train[fac_names])
num_var<-data.frame(train[num_names])
cor_numVar <- cor(num_var, use="pairwise.complete.obs")
cor_sorted <- as.matrix(sort(cor_numVar[,'SalePrice'], decreasing = TRUE))
length(cor_sorted)
#select only high corelations
CorHigh <- names(which(apply(cor_sorted, 1, function(x) abs(x) > 0.35)))
cor_numVar <- cor_numVar[CorHigh, CorHigh]
dim(cor_numVar)
corrplot.mixed(cor_numVar, tl.col="black", tl.pos = "lt")
lm_model <- lm(SalePrice ~ ., data = train)
(l <- sapply(iris, function(x) is.factor(x)))
#lm_model <- lm(SalePrice ~ ., data = train)
#summary(lm_model)
(l <- sapply(train, function(x) is.factor(x)))
#lm_model <- lm(SalePrice ~ ., data = train)
#summary(lm_model)
(l <- sapply(train, function(x) is.factor(x)))
m <- train[, l]
ifelse(n <- sapply(m, function(x) length(levels(x))) == 1, "DROP", "NODROP")
#lm_model <- lm(SalePrice ~ ., data = train)
#summary(lm_model)
(l <- sapply(train, function(x) is.factor(x)))
m <- train[, l]
ifelse(n <- sapply(m, function(x) length(levels(x))) == 1, "DROP", "NODROP")
str(n)
#lm_model <- lm(SalePrice ~ ., data = train)
#summary(lm_model)
(l <- sapply(train, function(x) is.factor(x)))
m <- train[, l]
ifelse(n <- sapply(m, function(x) length(levels(x))) == 1, "DROP", "NODROP")
head(n)
#lm_model <- lm(SalePrice ~ ., data = train)
#summary(lm_model)
(l <- sapply(train, function(x) is.factor(x)))
m <- train[, l]
head(m)
#lm_model <- lm(SalePrice ~ ., data = train)
#summary(lm_model)
ifelse(n <- sapply(m, function(x) length(levels(x))) == 1, "DROP", "NODROP")
sapply(train, function(x) {
class(x)
})
sapply(train, function(x) {
if (is.factor(x)) {
length(levels(x))
}
})
sapply(train, function(x) {
if (is.factor(x) == TRUE) {
length(levels(x))
}
})
sapply(train, class)
library(ggplot2)
library(tidyr)
library(dplyr)
library(magrittr)
library(grid)
library(gridExtra)
library(corrplot)
library(scales)
library(randomForest)
train <- read.csv("train.csv")
test <- read.csv("test.csv")
dim(test)
str(train[,c(1:10,81)])
x<-data.frame(Factor=sapply(train,is.factor), Missing_Values=colSums(is.na(train)))
fac_names=rownames(x[which(x$Factor==TRUE),])
num_names=rownames(x[which(x$Factor==FALSE),])
fac_var<-data.frame(train[fac_names])
num_var<-data.frame(train[num_names])
ggplot(train, aes(x = Neighborhood, y = SalePrice)) + geom_point()
# getting rid of train and test ids but keeping test ids for later submission
test_labels <- test$Id
test$Id <- NULL
train$Id <- NULL
test$SalePrice <- NA
# merge train and test into one dataframe
all <- rbind(train, test)
dim(all)
NAcol <- which(colSums(is.na(all)) > 0)
sort(colSums(sapply(all[NAcol], is.na)), decreasing = TRUE)
cat('There are', length(NAcol), 'columns with missing values')
NAcol <- which(colSums(is.na(all)) > 0)
sort(colSums(sapply(all[NAcol], is.na)), decreasing = TRUE)
cat('There are', length(NAcol), 'columns with missing values')
all <- subset(all, select=-c(PoolQC, MiscFeature, Alley, Fence, FireplaceQu))
dim(all)
is_factor <- names(all[,sapply(all, is.factor)])
is_integer <- names(all[,sapply(all, is.integer)])
is_integer
ggplot(all, aes(x = YrSold - YearBuilt, y = SalePrice)) + geom_point()
all$SaleType[is.na(all$SaleType)] <- names(sort(-table(all$SaleType)))[1]
all$KitchenQual[is.na(all$KitchenQual)] <- names(sort(-table(all$KitchenQual)))[1]
all$Electrical[is.na(all$Electrical)] <- names(sort(-table(all$Electrical)))[1]
all$Exterior2nd[is.na(all$Exterior2nd)] <- names(sort(-table(all$Exterior2nd)))[1]
all$Exterior1st[is.na(all$Exterior1st)] <- names(sort(-table(all$Exterior1st)))[1]
all$Functional[is.na(all$Functional)] <- names(sort(-table(all$Functional)))[1]
all$Utilities[is.na(all$Utilities)] <- names(sort(-table(all$Utilities)))[1]
all$MSZoning[is.na(all$MSZoning)] <- names(sort(-table(all$MSZoning)))[1]
all$BsmtFinType1[is.na(all$BsmtFinType1)] <- names(sort(-table(all$BsmtFinType1)))[1]
all$BsmtFinType2[is.na(all$BsmtFinType2)] <- names(sort(-table(all$BsmtFinType2)))[1]
all$BsmtQual[is.na(all$BsmtQual)] <- names(sort(-table(all$BsmtQual)))[1]
all$BsmtExposure[is.na(all$BsmtExposure)] <- names(sort(-table(all$BsmtExposure)))[1]
all$BsmtCond[is.na(all$BsmtCond)] <- names(sort(-table(all$BsmtCond)))[1]
all$GarageType[is.na(all$GarageType)] <- names(sort(-table(all$GarageType)))[1]
all$GarageCond[is.na(all$GarageCond)] <- names(sort(-table(all$GarageCond)))[1]
all$GarageFinish[is.na(all$GarageFinish)] <- names(sort(-table(all$GarageFinish)))[1]
all$GarageCond[is.na(all$GarageCond)] <- names(sort(-table(all$GarageCond)))[1]
all$GarageCond[is.na(all$GarageCond)] <- names(sort(-table(all$GarageCond)))[1]
all$GarageCond[is.na(all$GarageCond)] <- names(sort(-table(all$GarageCond)))[1]
is_integer
all$GarageArea[is.na(all$GarageArea)] <- round(mean(all$GarageArea, na.rm = TRUE))
all$GarageCars[is.na(all$GarageCars)] <- median(all$GarageCars, na.rm = TRUE)
all$TotalBsmtSF[is.na(all$TotalBsmtSF)] <- round(mean(all$TotalBsmtSF, na.rm = TRUE))
all$BsmtUnfSF[is.na(all$BsmtUnfSF)] <- round(mean(all$BsmtUnfSF, na.rm = TRUE))
all$BsmtFinSF2[is.na(all$BsmtFinSF2)] <- median(all$BsmtFinSF2, na.rm = TRUE)
all$BsmtFinSF1[is.na(all$BsmtFinSF1)] <- median(all$BsmtFinSF1, na.rm = TRUE)
all$BsmtHalfBath[is.na(all$BsmtHalfBath)] <- median(all$BsmtHalfBath, na.rm = TRUE)
all$BsmtFullBath[is.na(all$BsmtFullBath)] <- median(all$BsmtFullBath, na.rm = TRUE)
all$MasVnrArea[is.na(all$MasVnrArea)] <- median(all$MasVnrArea, na.rm = TRUE)
all$GarageQual[is.na(all$GarageQual)] <- names(sort(-table(all$GarageQual)))[1]
all$GarageYrBlt[is.na(all$GarageYrBlt)] <- median(all$GarageYrBlt, na.rm = TRUE)
all$LotFrontage[is.na(all$LotFrontage)] <- median(all$LotFrontage, na.rm = TRUE)
all$MasVnrType[is.na(all$MasVnrType)] <- names(sort(-table(all$MasVnrType)))[1]
library(ggplot2)
library(tidyr)
library(dplyr)
library(magrittr)
library(grid)
library(gridExtra)
library(corrplot)
library(scales)
library(randomForest)
train <- read.csv("train.csv")
test <- read.csv("test.csv")
dim(test)
str(train[,c(1:10,81)])
# getting rid of train and test ids but keeping test ids for later submission
test_labels <- test$Id
test$Id <- NULL
train$Id <- NULL
test$SalePrice <- NA
# merge train and test into one dataframe
all <- rbind(train, test)
NAcol <- which(colSums(is.na(all)) > 0)
sort(colSums(sapply(all[NAcol], is.na)), decreasing = TRUE)
cat('There are', length(NAcol), 'columns with missing values')
all <- subset(all, select=-c(PoolQC, MiscFeature, Alley, Fence, FireplaceQu))
dim(all)
is_factor <- names(all[,sapply(all, is.factor)])
is_integer <- names(all[,sapply(all, is.integer)])
is_integer
all$GarageArea[is.na(all$GarageArea)] <- round(mean(all$GarageArea, na.rm = TRUE))
all$GarageCars[is.na(all$GarageCars)] <- median(all$GarageCars, na.rm = TRUE)
all$TotalBsmtSF[is.na(all$TotalBsmtSF)] <- round(mean(all$TotalBsmtSF, na.rm = TRUE))
all$BsmtUnfSF[is.na(all$BsmtUnfSF)] <- round(mean(all$BsmtUnfSF, na.rm = TRUE))
all$BsmtFinSF2[is.na(all$BsmtFinSF2)] <- median(all$BsmtFinSF2, na.rm = TRUE)
all$BsmtFinSF1[is.na(all$BsmtFinSF1)] <- median(all$BsmtFinSF1, na.rm = TRUE)
all$BsmtHalfBath[is.na(all$BsmtHalfBath)] <- median(all$BsmtHalfBath, na.rm = TRUE)
all$BsmtFullBath[is.na(all$BsmtFullBath)] <- median(all$BsmtFullBath, na.rm = TRUE)
all$MasVnrArea[is.na(all$MasVnrArea)] <- median(all$MasVnrArea, na.rm = TRUE)
all$GarageQual[is.na(all$GarageQual)] <- names(sort(-table(all$GarageQual)))[1]
all$GarageYrBlt[is.na(all$GarageYrBlt)] <- median(all$GarageYrBlt, na.rm = TRUE)
all$LotFrontage[is.na(all$LotFrontage)] <- median(all$LotFrontage, na.rm = TRUE)
all$MasVnrType[is.na(all$MasVnrType)] <- names(sort(-table(all$MasVnrType)))[1]
NAcol <- which(colSums(is.na(all)) > 0)
missing_list <- sort(colSums(sapply(all[NAcol], is.na)), decreasing = TRUE)
cat('There are', length(NAcol), 'columns with missing values')
train <- all[1:1460,]
test_final <- all[1461:2919,]
x<-data.frame(Factor=sapply(train,is.factor), Missing_Values=colSums(is.na(train)))
fac_names=rownames(x[which(x$Factor==TRUE),])
num_names=rownames(x[which(x$Factor==FALSE),])
fac_var<-data.frame(train[fac_names])
num_var<-data.frame(train[num_names])
dim(num_var)
cor_numVar <- cor(num_var, use="pairwise.complete.obs") #correlations of all numeric variables
#sort on decreasing correlations with SalePrice
cor_sorted <- as.matrix(sort(cor_numVar[,'SalePrice'], decreasing = TRUE))
length(cor_sorted)
#select only high corelations
CorHigh <- names(which(apply(cor_sorted, 1, function(x) abs(x) > 0.35)))
cor_numVar <- cor_numVar[CorHigh, CorHigh]
dim(cor_numVar)
corrplot.mixed(cor_numVar, tl.col="black", tl.pos = "lt")
ggplot(train, aes(x = factor(OverallQual), y = SalePrice) ) +
geom_boxplot(col = "orange") +
labs(x='Overall Quality', y = "Sale Price")
ggplot(train, aes(x = GrLivArea, y = SalePrice) ) +
geom_point(col='orange') +
labs(x='Ground Floor Living Area', y = "Sale Price") +
scale_y_continuous(breaks= seq(0, 800000, by=100000), label=comma) # for comma required to load library(scales)
set.seed(2018)
quick_RF <- randomForest(x=train[1:1460,-75], y=train$SalePrice[1:1460], ntree=100,importance=TRUE)
x[,1]
x_train <- train[1:(dim(train)[1]*0.7),]
x_test <- train[(dim(train)[1]*0.7+1):1460,]
tree <- rpart(SalePrice ~ GrLivArea + Neighborhood + OverallQual + X1stFlrSF + TotalBsmtSF +
BsmtFinSF1 + X2ndFlrSF + GarageCars + GarageArea + BsmtFinType1 + OverallCond + ExterQual + TotRmsAbvGrd + CentralAir + GarageYrBlt + LotArea + MSSubClass + GarageFinish +
KitchenQual + YearRemodAdd,data = train, metod = "class")
library(ggplot2)
library(rpart)
library(tidyr)
library(dplyr)
library(magrittr)
library(grid)
library(gridExtra)
library(corrplot)
library(scales)
library(randomForest)
tree <- rpart(SalePrice ~ GrLivArea + Neighborhood + OverallQual + X1stFlrSF + TotalBsmtSF +
BsmtFinSF1 + X2ndFlrSF + GarageCars + GarageArea + BsmtFinType1 + OverallCond + ExterQual + TotRmsAbvGrd + CentralAir + GarageYrBlt + LotArea + MSSubClass + GarageFinish +
KitchenQual + YearRemodAdd,data = train, metod = "class")
tree <- rpart(SalePrice ~ . = train, metod = "class")
tree <- rpart(SalePrice ~ ., data = train, metod = "class")
tree <- rpart(SalePrice ~ GrLivArea + Neighborhood + OverallQual + X1stFlrSF + TotalBsmtSF +
BsmtFinSF1 + X2ndFlrSF + GarageCars + GarageArea + BsmtFinType1 + OverallCond + ExterQual + TotRmsAbvGrd + CentralAir + GarageYrBlt + LotArea + MSSubClass + GarageFinish +
KitchenQual + YearRemodAdd, data = train, metod = "class")
tree <- rpart(SalePrice ~ GrLivArea + Neighborhood + OverallQual + X1stFlrSF + TotalBsmtSF +
BsmtFinSF1 + X2ndFlrSF + GarageCars + GarageArea + BsmtFinType1 + OverallCond + ExterQual + TotRmsAbvGrd + CentralAir + GarageYrBlt + LotArea + MSSubClass + GarageFinish +
KitchenQual + YearRemodAdd, data = train, metod = "class")
tree <- rpart(SalePrice ~ ., data = train, metod = "class")
tree <- rpart(SalePrice ~ GrLivArea, data = train, metod = "class")
tree <- rpart(SalePrice ~ OverallQual, data = train, metod = "class")
tree <- rpart(SalePrice ~ OverallQual, data = train)
#tree_prediction <- data.frame(predict(tree, test_final, interval = "prediction"))
#tree_final <- data.frame(Id = test_labels, SalePrice = fitmodel[,1])
#write.csv(final, "decision_tree.csv", row.names = FALSE)
tree <- rpart(SalePrice ~ GrLivArea + Neighborhood + OverallQual + X1stFlrSF + TotalBsmtSF +
BsmtFinSF1 + X2ndFlrSF + GarageCars + GarageArea + BsmtFinType1 + OverallCond + ExterQual + TotRmsAbvGrd + CentralAir + GarageYrBlt + LotArea + MSSubClass + GarageFinish +
KitchenQual + YearRemodAdd, data = train)
tree_prediction <- data.frame(predict(tree, test_final, interval = "prediction"))
tree_final <- data.frame(Id = test_labels, SalePrice = fitmodel[,1])
tree <- rpart(SalePrice ~ GrLivArea + Neighborhood + OverallQual + X1stFlrSF + TotalBsmtSF +
BsmtFinSF1 + X2ndFlrSF + GarageCars + GarageArea + BsmtFinType1 + OverallCond + ExterQual + TotRmsAbvGrd + CentralAir + GarageYrBlt + LotArea + MSSubClass + GarageFinish +
KitchenQual + YearRemodAdd, data = train)
tree_prediction <- data.frame(predict(tree, test_final, interval = "prediction"))
tree_final <- data.frame(Id = test_labels, SalePrice = tree_prediction[,1])
write.csv(final, "decision_tree.csv", row.names = FALSE)
tree <- rpart(SalePrice ~ GrLivArea + Neighborhood + OverallQual + X1stFlrSF + TotalBsmtSF +
BsmtFinSF1 + X2ndFlrSF + GarageCars + GarageArea + BsmtFinType1 + OverallCond + ExterQual + TotRmsAbvGrd + CentralAir + GarageYrBlt + LotArea + MSSubClass + GarageFinish +
KitchenQual + YearRemodAdd, data = train)
tree_prediction <- data.frame(predict(tree, test_final, interval = "prediction"))
tree_final <- data.frame(Id = test_labels, SalePrice = tree_prediction[,1])
write.csv(tree_final, "decision_tree.csv", row.names = FALSE)
library(shiny)
tags$b("Hello world")
pwd()
getwd()
2+2
getwd()
load movies data
#
getwd()
this.dir <- dirname(parent.frame(2)$ofile)
setwd(this.dir)
this.dir <- dirname(parent.frame(2)$ofile)
script.dir <- dirname(sys.frame(1)$ofile)
library(rstudioapi)
setwd(dirname(current_path ))
# Getting the path of your current open file
current_path <- rstudioapi::getActiveDocumentContext()$path
getwd()
getwd()
getwd()
setwd(dirname(present_directory))
getwd()
getSrcDirectory()[1]
library(utils)
utils::getSrcDirectory()[1]
library(utils)
# Getting the path of your current open file
this.dir <- "/Users/abdulrasheed/documents/programming/datacamp/R/projects/shiny-movies-app"
# Getting the path of your current open file
x <- utils::getSrcDirectory()[1]
dirname(sys.frame(1)$ofile)
head(movies)
getwd()
head(x)
str(movies)
pwd()
getwd()
listfiles()
list.files()
list.files("/Movies")
list.files("/Movies/")
list.files("Movies/")
list.files("Movies")
list.files("documents/programming/datacamp/R/projects/shiny-movies-app/")
load(documents/programming/datacamp/R/projects/shiny-movies-app/movies.Rdata)
load("documents/programming/datacamp/R/projects/shiny-movies-app/movies.Rdata")
head(movies)
str(movies)
str(movies)
head(movies)
list.fileS()
list.files()
# Getting the path of your current open file
load(documents/programming/datacamp/R/projects/shiny-movies-app/movies.Rdata)
load("documents/programming/datacamp/R/projects/shiny-movies-app/movies.Rdata")
load("documents/programming/datacamp/R/projects/shiny-movies-app/movies.Rdata")
head(movies)
# Getting the path of your current open file
# load("documents/programming/datacamp/R/projects/shiny-movies-app/movies.Rdata")
head(movies)
head(movies)
head(movies)
# Getting the path of your current open file
# load("documents/programming/datacamp/R/projects/shiny-movies-app/movies.Rdata")
head(movies)
# Getting the path of your current open file
load("documents/programming/datacamp/R/projects/shiny-movies-app/movies.Rdata")
head(movies)
movies
head(movies)
# Getting the path of your current open file
# load("documents/programming/datacamp/R/projects/shiny-movies-app/movies.Rdata")
movies
dim(movies)
movies
head(movies)
tail(movies)
ls()
# Getting the path of your current open file
movies <- get(load(("documents/programming/datacamp/R/projects/shiny-movies-app/movies.Rdata"))
head(movies)
movies
# Getting the path of your current open file
load(("documents/programming/datacamp/R/projects/shiny-movies-app/movies.Rdata")
load
# Getting the path of your current open file
load("documents/programming/datacamp/R/projects/shiny-movies-app/movies.Rdata")
print(head(movies))
print(head(movies))
head(movies)
# Getting the path of your current open file
load(url("documents/programming/datacamp/R/projects/shiny-movies-app/movies.Rdata"))
# Getting the path of your current open file
load("documents/programming/datacamp/R/projects/shiny-movies-app/movies.Rdata")
head(movies)
head(movies)
head(movies)
head(movies)
shiny::runApp('Documents/PROGRAMMING/datacamp/R/projects/shiny-movies-app')
runApp('Documents/PROGRAMMING/datacamp/R/projects/shiny-movies-app')
runApp('Documents/PROGRAMMING/datacamp/R/projects/shiny-movies-app')
runApp('Documents/PROGRAMMING/datacamp/R/projects/shiny-movies-app')
runApp('Documents/PROGRAMMING/datacamp/R/projects/shiny-movies-app')
runApp('Documents/PROGRAMMING/datacamp/R/projects/shiny-movies-app')
runApp('Documents/PROGRAMMING/datacamp/R/projects/shiny-movies-app')
data(iris)
head(iris)
data(iris)
data(iris)
data(iris)
shiny::runApp('Documents/PROGRAMMING/datacamp/R/projects/shiny-app-iris')
runApp('Documents/PROGRAMMING/datacamp/R/projects/shiny-app-iris')
runApp('Documents/PROGRAMMING/datacamp/R/projects/shiny-app-iris')
runApp('Documents/PROGRAMMING/datacamp/R/projects/shiny-app-iris')
runApp('Documents/PROGRAMMING/datacamp/R/projects/shiny-app-iris')
runApp('Documents/PROGRAMMING/datacamp/R/projects/shiny-app-iris')
shiny::runApp()
list.files()
head(iris)
runApp()
runApp()
runApp()
iris <- read.csv("Iris.csv")
head(iris)
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
